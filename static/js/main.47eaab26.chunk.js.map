{"version":3,"sources":["App.js","index.js"],"names":["Header","_ref","score","bestScore","displayHelpModal","react_default","a","createElement","className","src","alt","onClick","Body","_ref2","images","handleClick","map","el","key","uuidv4","name","substring","length","EndModal","_ref3","hideModal","isFinished","HelpModal","_ref4","hideHelpModal","isHelpClicked","App","_useState","useState","_useState2","Object","slicedToArray","setScore","_useState3","_useState4","setBestScore","_useState5","_useState6","setImages","_useState7","_useState8","cards","setCards","_useState9","_useState10","setIsFinished","_useState11","_useState12","setIsHelpClicked","App_Header","App_Body","e","includes","target","newCards","concat","updateCards","arr","imageArr","i","j","Math","floor","random","temp","randomizeImages","App_HelpModal","App_EndModal","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.47eaab26.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst Header = ({ score, bestScore, displayHelpModal }) => {\n  return(\n    <header className = 'header'>\n      <h1 className = 'header__title'>Memory</h1>\n      <div className = 'header__info'>\n        <div className = 'header__score'>\n          <p>Current Score: {score}</p>\n          <p>Best Score: {bestScore}</p>\n        </div>\n        <img \n          src = {'./images/help.svg'} \n          alt = 'help icon' \n          className = 'header__help'\n          onClick = {displayHelpModal}\n        ></img>\n      </div>\n    </header>\n  )\n}\n\nconst Body = ({ images, handleClick }) => {\n  return(\n    <div className = 'body'>\n      {images.map((el) =>\n        <img \n          src = {el} \n          key = {uuidv4()} \n          className = 'card' \n          name = {el.substring(9, el.length - 4)}\n          alt = {el.substring(9,el.length - 4)}\n          onClick = {handleClick}\n        ></img>  \n      )}\n    </div>\n  )\n}\n\nconst EndModal = ({ hideModal, bestScore, isFinished }) => {\n  if(isFinished) {\n    return(\n      <div className = 'modal'>\n        <div className = 'modal__content'>\n          <div className = 'modal__close-wrapper'>\n            <div className = 'modal__close' onClick = {hideModal}>X</div>\n          </div>\n          <div className = 'modal__body-one'>\"We are all the pieces of what we remember. We hold in ourselves the hopes and fears of those who love us. As long as there is love and memory, there is no true loss.\"</div>\n          <div className = 'modal__body-two'>{bestScore}</div>\n          <div className = 'modal__body-three'>This experience as well as the points are now a part of you. Do with it what you will.</div>\n        </div>\n      </div>\n    )\n  } else {\n    return(null)\n  }\n}\n\nconst HelpModal = ({ hideHelpModal, isHelpClicked }) => {\n  if(isHelpClicked) {\n    return(\n      <div className = 'modal'>\n        <div className = 'modal__content'>\n          <div className = 'modal__close-wrapper'>\n            <div className = 'modal__close' onClick = {hideHelpModal}>X</div>\n          </div>\n          <div className = 'modal__body-one'>Click on a card. The card should never be clicked again. See how far your memory serves you well.</div>\n        </div>\n      </div>\n    )\n  } else {\n    return(null)\n  }\n}\n\nconst App = () => {\n  const [score, setScore] = useState(0)\n  const [bestScore, setBestScore] = useState(0)\n  const [images, setImages] = useState([\n    './images/the-fool.svg',\n    './images/the-magician.svg',\n    './images/high-priestess.svg',\n    './images/the-empress.svg',\n    './images/the-emperor.svg',\n    './images/heirophant.svg',\n    './images/the-lovers.svg',\n    './images/the-chariot.svg',\n    './images/strength.svg',\n    './images/the-hermit-crab.svg',\n    './images/the-wheel.svg',\n    './images/justice.svg',\n    './images/hanged-man.svg',\n    './images/death.svg',\n    './images/temperance.svg',\n    './images/the-devil.svg',\n    './images/the-tower.svg',\n    './images/the-star.svg',\n    './images/the-moon.svg',\n    './images/the-sun.svg',\n    './images/judgement.svg',\n    './images/the-world.svg'\n  ])\n  const [cards, setCards] = useState([])\n  const [isFinished, setIsFinished] = useState(false)\n  const [isHelpClicked, setIsHelpClicked] = useState(false)\n\n  const incrementScore = () => {\n    setScore(score + 1)\n  }\n\n  const resetScore = () => {\n    setScore(0)\n  }\n\n  const updateBestScore = () => {\n    setBestScore(score)\n  }\n\n  const updateCards = (e) => {\n    const newCards = cards.concat(e.target.name)\n    setCards(newCards)\n  }\n\n  const resetCards = () => {\n    setCards([])\n  }\n\n  const displayModal = () => {\n    setIsFinished(true)\n  }\n\n  const hideModal = () => {\n    setIsFinished(false)\n  }\n\n  const displayHelpModal = () => {\n    setIsHelpClicked(true)\n  }\n\n  const hideHelpModal = () => {\n    setIsHelpClicked(false)\n  }\n\n  const randomizeImages = (arr) => {\n    const imageArr = arr\n    for(let i = imageArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random()*(i + 1))\n      const temp = imageArr[i]\n      imageArr[i] = imageArr[j]\n      imageArr[j] = temp\n    }\n    setImages(imageArr)\n  }\n\n  const handleClick = (e) => {\n    if(cards.includes(e.target.name)) {\n      updateBestScore()\n      resetScore()\n      resetCards()\n      displayModal()\n    } else {\n      incrementScore()\n      updateCards(e)\n      randomizeImages(images)\n    }\n  }\n\n  return(\n    <div className = 'container'>\n      <Header\n        score = {score}\n        bestScore = {bestScore}\n        displayHelpModal = {displayHelpModal}\n      />\n      <Body\n        images = {images}\n        handleClick = {handleClick}\n      />\n      <HelpModal\n        hideHelpModal = {hideHelpModal}\n        isHelpClicked = {isHelpClicked}\n      />\n      <EndModal\n        hideModal = {hideModal}\n        bestScore = {bestScore}\n        isFinished = {isFinished}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}